package views

import (
  "fmt"

  "github.com/xV0lk/htmx-go/types"
	"github.com/xV0lk/htmx-go/views"
)

templ TaskList(tasks types.Tasks, oob bool ) {
  <div 
  class="py-8"
  id="tasks-list" 
  if oob {
    hx-swap-oob="true"
  }
  >
    for _, item := range tasks.Items {
          @Task(item, false)
        }
  </div>
}

templ Task(item *types.Item, editing bool) {
<div
  id={fmt.Sprintf("task-%d", item.ID)}
  class={"flex items-center justify-between rounded-lg px-4 my-3 py-2.5 transition", 
          templ.KV("bg-emerald-200", item.Completed),
          templ.KV("bg-white", !item.Completed),
        }>
  <div class="flex items-center flex-auto space-x-2.5">
    <button type="button" class="cursor-move text-gray-500 hover:text-gray-700 handle">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
        class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 9h16.5m-16.5 6.75h16.5" />
      </svg>
    </button>
    if editing {
      <form 
      class="flex items-center justify-between w-full"
      hx-put={fmt.Sprintf("/tasks/%d", item.ID)}
      hx-target={fmt.Sprintf("#task-%d", item.ID)}
      hx-target-error="#toast-notification"
      hx-swap="outerHTML transition:true"
      >
        @views.Csrf()
        <input
          name="title"
          value={item.Title}
          class="border border-gray-300 text-gray-900 rounded-lg bg-indigo-50 focus:ring-blue-500 focus:border-blue-500 block w-full px-2.5 py-1.5"
        />
        <button class="text-blue-500 hover:text-blue-700">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
            stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" />
          </svg>
        </button>
      </form>
    } else {
      <p class="title">{item.Title}</p>
    }
  </div>

  <div class="flex items-center space-x-2.5">
    <button 
      hx-delete={fmt.Sprintf("/tasks/%d", item.ID)}
      hx-headers={fmt.Sprintf("{\"X-CSRF-Token\": \"%s\"}", ctx.Value("gorilla.csrf.Token").(string))}
      hx-target={fmt.Sprintf("#task-%d", item.ID)}
      hx-swap="outerHTML transition:true"
      type="button"
      class="text-red-500 hover:text-red-700"
    >
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
        class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>

    <button
      hx-get={fmt.Sprintf("/tasks/%d/edit", item.ID)}
      hx-target={fmt.Sprintf("#task-%d", item.ID)}
      hx-swap="outerHTML"
      type="button"
      class="edit text-blue-500 hover:text-blue-700"
    >
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
        class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round"
          d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" />
      </svg>
    </button>

    <input 
      type="checkbox"
      class="w-5 h-5 text-blue-700 bg-white border-gray-300 rounded focus:ring-blue-600"
      name="completed"
      hx-put={fmt.Sprintf("/tasks/%d/toggle", item.ID)}
      hx-include="#csrf"
      if item.Completed {
        checked
      }
      />
  </div>
</div>
}